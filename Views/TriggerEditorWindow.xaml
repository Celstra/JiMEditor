<Window x:Class="JiME.Views.TriggerEditorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Trigger Editor" Width="100" Style="{StaticResource DefaultWindow}" WindowStartupLocation="CenterScreen" ContentRendered="Window_ContentRendered">
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*"/>
			<RowDefinition Height="auto"/>
		</Grid.RowDefinitions>

		<StackPanel Margin="10">
			<TextBlock Style="{StaticResource Heading}" Text="Trigger Name:"/>
			<StackPanel Orientation="Horizontal" Margin="0,5,0,0">
				<TextBox x:Name="nameTB" Style="{StaticResource DefaultTextBox}" Margin="0,0,10,0" Width="250" HorizontalAlignment="Left"/>

				<CheckBox x:Name="multiCB" Content="This Trigger is a Multi-Trigger" Foreground="White" VerticalAlignment="Center"/>
			</StackPanel>

			<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
					Triggers are <Italic>True / False</Italic> values that are set during the Scenario to keep track of player actions. <Bold>All Triggers start off with a value of <Italic>False</Italic></Bold>.
			</TextBlock>
			<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
				Triggers are also used by many components for notification to be activated. For example, Triggers can activate Events, start and end Objectives, activate Chapters, end the Scenario, and other actions that use Triggers.
			</TextBlock>
			<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
				<Bold>Triggers can only activate a component once</Bold>. Firing a Trigger more than once is ignored by the companion app. If more than one component is set to be activated by the same Trigger, only the first one the companion app finds will be Triggered. The rest are ignored.
			</TextBlock>

			<TextBlock Style="{StaticResource Heading}" Text="Special Instructions For Events" Margin="0,10,0,0"/>
			<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,0,0,0">
				If more than one <Bold>Event</Bold> is triggered by the same Trigger (and NO other components), <Bold>one of the Events will be randomly chosen to activate</Bold>. The rest are ignored.
			</TextBlock>

			<TextBlock Style="{StaticResource Heading}" Text="Multi-Triggers" Margin="0,10,0,0"/>
			<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
				If a Trigger is marked as a <Bold>Multi-Trigger</Bold>, the normal behavior changes, and it will <Bold>activate all components listening for it, including all Events set to be triggered by it. Multi-Triggers can be fired multiple times, and once they are, their value will always be <Italic>True</Italic></Bold>.
			</TextBlock>
			<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0" FontSize="14">
				<Bold>Be careful using Multi-Triggers. You can create a circular loop of actions that keeps activating itself. You could also repeatedly activate components that aren't meant to be triggered more than once, such as Chapters. Keep their usage simple.</Bold>
			</TextBlock>

			<!--<Border Style="{StaticResource callout}" Margin="0,5">
				<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
					For example, let's say you have a <Bold>Decision Interaction Event</Bold> which asks the players if they want to steal a carrot. You could create a <Bold>Trigger</Bold> called "Carrot Stolen" that gets <Italic>fired by the Event</Italic> if the players select "Yes". A <Bold>Story Branch Event</Bold> could be discovered later on which checks the value of the "Carrot Stolen" Trigger and presents a branching story based on whether or not the carrot was stolen.
				</TextBlock>
			</Border>-->
		</StackPanel>

		<!--Footer-->
		<Border Grid.Row="1" BorderThickness="0,1,0,0" BorderBrush="Silver" HorizontalAlignment="Stretch" Background="#FF46464A">
			<WrapPanel HorizontalAlignment="Right" >

				<Button x:Name="okButton" Margin="10" Background="MediumSeaGreen" Click="OkButton_Click" IsDefault="True">
					<Image Source="/JiME;component/Assets/ok.png" Stretch="Uniform" Width="32" Margin="5"/>
				</Button>

				<Button x:Name="cancelButton" Margin="0,10,10,10" Background="{StaticResource bgCancelDelete}" Click="CancelButton_Click" IsCancel="True">
					<Image Source="/JiME;component/Assets/cancel.png" Stretch="Uniform" Width="32" Margin="5"/>
				</Button>
			</WrapPanel>
		</Border>
	</Grid>
</Window>
